*Leer sin ajuste de línea

1. Copiar lo siguiente en la sección de declaraciones globales de Main.cpp, antes de LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

CTga textura[50];

____________________________________________________________________________________________

2. Copiar las siguientes funciones después de la función DescargaModelos:

void cargaTexturas()
{
	textura[0].LoadTGA("Texturas/t1.tga");
	textura[1].LoadTGA("Texturas/t2.tga");
	textura[2].LoadTGA("Texturas/t3.tga");
	textura[3].LoadTGA("Texturas/t4.tga");
	textura[4].LoadTGA("Texturas/t5.tga");
	textura[5].LoadTGA("Texturas/t6.tga");
	textura[6].LoadTGA("Texturas/t7.tga");
	textura[7].LoadTGA("Texturas/t8.tga");
	textura[8].LoadTGA("Texturas/t9.tga");
	textura[9].LoadTGA("Texturas/t10.tga");
	textura[10].LoadTGA("Texturas/t11.tga");
	textura[11].LoadTGA("Texturas/t12.tga");
	textura[12].LoadTGA("Texturas/t13.tga");
	textura[13].LoadTGA("Texturas/t14.tga");
	textura[14].LoadTGA("Texturas/t15.tga");
	textura[15].LoadTGA("Texturas/t16.tga");
	textura[16].LoadTGA("Texturas/t17.tga");
	textura[17].LoadTGA("Texturas/t18.tga");
	textura[18].LoadTGA("Texturas/t19.tga");
	textura[19].LoadTGA("Texturas/t20.tga");
	textura[20].LoadTGA("Texturas/t21.tga");
	textura[21].LoadTGA("Texturas/t22.tga");
	textura[22].LoadTGA("Texturas/t23.tga");
	textura[23].LoadTGA("Texturas/t24.tga");
	textura[24].LoadTGA("Texturas/t25.tga");
	textura[25].LoadTGA("Texturas/t26.tga");
	textura[26].LoadTGA("Texturas/t27.tga");
}

void descargaTexturas()
{
	for(int i=0; i<27; i++)
		textura[i].Elimina();
}

____________________________________________________________________________________________

3. Copiar en IniGL lo siguiente, después de la llamada a CargaModelos:

cargaTexturas();

____________________________________________________________________________________________

4. Copiar en WinMain lo siguiente, después de la llamada a DescargaModelos:

descargaTexturas();

____________________________________________________________________________________________

5. Copiar esta línea al inicio de la función dibujaPlataforma():

glEnable(GL_TEXTURE_2D);

____________________________________________________________________________________________

6. Copiar esta línea al final de la función dibujaPlataforma():

glDisable(GL_TEXTURE_2D);

____________________________________________________________________________________________

7. Copiar esta línea al inicio de la función dibujaEscenario():

glEnable(GL_TEXTURE_2D);

____________________________________________________________________________________________

8. Copiar esta línea en la función dibujaEscenario() después del último plano (antes de la primera llamada a otras funciones):

glDisable(GL_TEXTURE_2D);

____________________________________________________________________________________________

9. Copiar las siguientes funciones antes de la función dibujaEscenario:

void dibujaConodeLuz()
{
	float ang;
	float a[3], b[3];
	float delta;
	float radio=5.0f;
	int lados=8;
	float altura=19.0f;

	delta=360.0f/lados;

	glDisable(GL_LIGHTING);
	glEnable(GL_TEXTURE_2D);

	glBindTexture(GL_TEXTURE_2D, textura[26].texID);

	glEnable(GL_ALPHA_TEST);
	glAlphaFunc(GL_GREATER, 0.6f);

	glBegin(GL_QUADS);
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.8f, altura,  1.8f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.8f, altura,  1.8f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.8f, altura, -1.8f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.8f, altura, -1.8f);
	glEnd();

	glDisable(GL_ALPHA_TEST);

	glBindTexture(GL_TEXTURE_2D, textura[25].texID);

	glEnable(GL_BLEND);
	glBlendFunc(GL_ONE, GL_ONE);
	
	for(int i=0; i < lados; i++)
	{
		ang=(i+1)*delta;
		
		a[0]=radio*(float)cos(ang*PI/180.0f);
		a[1]=0.0f;
		a[2]=radio*(float)sin(ang*PI/180.0f);

		ang=i*delta;
		
		b[0]=radio*(float)cos(ang*PI/180.0f);
		b[1]=0.0f;
		b[2]=radio*(float)sin(ang*PI/180.0f);

		glBegin(GL_TRIANGLES);
			glTexCoord2f(0.1f, 0.1f); glVertex3f(a[0], a[1], a[2]);
			glTexCoord2f(0.9f, 0.1f); glVertex3f(b[0], b[1], b[2]);
			glTexCoord2f(0.5f, 1.0f); glVertex3f(0.0f, altura, 0.0f);
		glEnd();
	}

	glDisable(GL_BLEND);
	glEnable(GL_LIGHTING);

	glDisable(GL_TEXTURE_2D);
}

void dibujaFondo()
{
	static int tiempo=0;
	static float escalaBrillo=1.0f;
	static int funcionBrillo=0; //1: aumenta, 2: disminuye, 0: sin cambio

	glEnable(GL_TEXTURE_2D);

	//Primera parte
	glBindTexture(GL_TEXTURE_2D, textura[23].texID);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 0.0f,  0.0f, -10.0f);
		glTexCoord2f(2.0f, 0.0f); glVertex3f(80.0f,  0.0f, -10.0f);
		glTexCoord2f(2.0f, 2.0f); glVertex3f(80.0f, 71.0f, -10.0f);
		glTexCoord2f(0.0f, 2.0f); glVertex3f( 0.0f, 71.0f, -10.0f);
	glEnd();

	//Segunda parte
	glBindTexture(GL_TEXTURE_2D, textura[21].texID);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.4f, 0.0f); glVertex3f( 0.0f,  90.0f, -10.0f);
		glTexCoord2f(1.2f, 0.0f); glVertex3f(35.0f,  90.0f, -10.0f);
		glTexCoord2f(1.2f, 7.0f); glVertex3f(35.0f, 205.0f, -10.0f);
		glTexCoord2f(0.4f, 7.0f); glVertex3f( 0.0f, 205.0f, -10.0f);
	glEnd();

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(-0.1f, 0.0f); glVertex3f(35.0f,  90.0f, -10.0f);
		glTexCoord2f( 1.0f, 0.0f); glVertex3f(80.0f,  90.0f, -10.0f);
		glTexCoord2f( 1.0f, 7.0f); glVertex3f(80.0f, 205.0f, -10.0f);
		glTexCoord2f(-0.1f, 7.0f); glVertex3f(35.0f, 205.0f, -10.0f);
	glEnd();

	//Columnas

	//1
	//Cara frontal
	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f , 0.0f); glVertex3f(26.0f,  90.0f, -6.0f);
		glTexCoord2f(0.12f, 0.0f); glVertex3f(32.0f,  90.0f, -6.0f);
		glTexCoord2f(0.12f, 7.0f); glVertex3f(32.0f, 205.0f, -6.0f);
		glTexCoord2f(0.0f , 7.0f); glVertex3f(26.0f, 205.0f, -6.0f);
	glEnd();

	//Cara izquierda
	glBegin(GL_QUADS);
		glNormal3f(-1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.1f, 0.0f); glVertex3f(26.0f,  90.0f, -10.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(26.0f,  90.0f, -6.0f);
		glTexCoord2f(0.0f, 7.0f); glVertex3f(26.0f, 205.0f, -6.0f);
		glTexCoord2f(0.1f, 7.0f); glVertex3f(26.0f, 205.0f, -10.0f);
	glEnd();

	//Cara derecha
	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.02f, 0.0f); glVertex3f(32.0f,  90.0f, -6.0f);
		glTexCoord2f(0.12f, 0.0f); glVertex3f(32.0f,  90.0f, -10.0f);
		glTexCoord2f(0.12f, 7.0f); glVertex3f(32.0f, 205.0f, -10.0f);
		glTexCoord2f(0.02f, 7.0f); glVertex3f(32.0f, 205.0f, -6.0f);
	glEnd();

	//2
	//Cara frontal
	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f , 0.0f); glVertex3f(39.0f,  90.0f, -6.0f);
		glTexCoord2f(0.12f, 0.0f); glVertex3f(45.0f,  90.0f, -6.0f);
		glTexCoord2f(0.12f, 7.0f); glVertex3f(45.0f, 205.0f, -6.0f);
		glTexCoord2f(0.0f , 7.0f); glVertex3f(39.0f, 205.0f, -6.0f);
	glEnd();

	//Cara izquierda
	glBegin(GL_QUADS);
		glNormal3f(-1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.1f, 0.0f); glVertex3f(39.0f,  90.0f, -10.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(39.0f,  90.0f, -6.0f);
		glTexCoord2f(0.0f, 7.0f); glVertex3f(39.0f, 205.0f, -6.0f);
		glTexCoord2f(0.1f, 7.0f); glVertex3f(39.0f, 205.0f, -10.0f);
	glEnd();

	//Cara derecha
	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.02f, 0.0f); glVertex3f(45.0f,  90.0f, -6.0f);
		glTexCoord2f(0.12f, 0.0f); glVertex3f(45.0f,  90.0f, -10.0f);
		glTexCoord2f(0.12f, 7.0f); glVertex3f(45.0f, 205.0f, -10.0f);
		glTexCoord2f(0.02f, 7.0f); glVertex3f(45.0f, 205.0f, -6.0f);
	glEnd();

	//Tercera parte
	glBindTexture(GL_TEXTURE_2D, textura[22].texID);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f( 0.0f, 0.0f); glVertex3f(  0.0f, 250.0f, -10.0f);
		glTexCoord2f(10.0f, 0.0f); glVertex3f(410.0f, 250.0f, -10.0f);
		glTexCoord2f(10.0f, 2.0f); glVertex3f(410.0f, 277.0f, -10.0f);
		glTexCoord2f( 0.0f, 2.0f); glVertex3f(  0.0f, 277.0f, -10.0f);
	glEnd();

	glBindTexture(GL_TEXTURE_2D, textura[21].texID);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f( 0.0f, 0.0f); glVertex3f(  0.0f, 220.0f, -10.0f);
		glTexCoord2f(10.0f, 0.0f); glVertex3f(410.0f, 220.0f, -10.0f);
		glTexCoord2f(10.0f, 2.0f); glVertex3f(410.0f, 250.0f, -10.0f);
		glTexCoord2f( 0.0f, 2.0f); glVertex3f(  0.0f, 250.0f, -10.0f);
	glEnd();

	//Columnas

	for(int i=0; i<10; i++) //10 columnas
	{
		glPushMatrix();
			glTranslatef(43.2f+(i*41.0f), 0.0f, 0.0f);

			//Cara frontal
			glBegin(GL_QUADS);
				glNormal3f(0.0f, 0.0f, 1.0f);
				glTexCoord2f(0.0f , 0.0f); glVertex3f(-2.5f, 220.0f, -7.0f);
				glTexCoord2f(0.12f, 0.0f); glVertex3f( 2.5f, 220.0f, -7.0f);
				glTexCoord2f(0.12f, 5.0f); glVertex3f( 2.5f, 277.0f, -7.0f);
				glTexCoord2f(0.0f , 5.0f); glVertex3f(-2.5f, 277.0f, -7.0f);
			glEnd();

			//Cara izquierda
			glBegin(GL_QUADS);
				glNormal3f(-1.0f, 0.0f, 0.0f);
				glTexCoord2f(0.1f, 0.0f); glVertex3f(-2.5f, 220.0f, -10.0f);
				glTexCoord2f(0.0f, 0.0f); glVertex3f(-2.5f, 220.0f, -7.0f);
				glTexCoord2f(0.0f, 5.0f); glVertex3f(-2.5f, 277.0f, -7.0f);
				glTexCoord2f(0.1f, 5.0f); glVertex3f(-2.5f, 277.0f, -10.0f);
			glEnd();

			//Cara derecha
			glBegin(GL_QUADS);
				glNormal3f(1.0f, 0.0f, 0.0f);
				glTexCoord2f(0.02f, 0.0f); glVertex3f(2.5f, 220.0f, -7.0f);
				glTexCoord2f(0.12f, 0.0f); glVertex3f(2.5f, 220.0f, -10.0f);
				glTexCoord2f(0.12f, 5.0f); glVertex3f(2.5f, 277.0f, -10.0f);
				glTexCoord2f(0.02f, 5.0f); glVertex3f(2.5f, 277.0f, -7.0f);
			glEnd();

		glPopMatrix();
	}

	glDisable(GL_TEXTURE_2D);

	glDisable(GL_LIGHTING);

	glColor3f(0.0f, 0.0f, 0.0f);

	glBegin(GL_QUADS);
		glVertex3f( 0.0f, 71.0f, -10.0f);
		glVertex3f(80.0f, 71.0f, -10.0f);
		glVertex3f(80.0f, 90.0f, -10.0f);
		glVertex3f( 0.0f, 90.0f, -10.0f);
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(  0.0f, 195.0f, -5.0f);
		glVertex3f(410.0f, 195.0f, -5.0f);
		glVertex3f(410.0f, 225.0f, -5.0f);
		glVertex3f(  0.0f, 225.0f, -5.0f);
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(  0.0f, 275.0f, -5.0f);
		glVertex3f(410.0f, 275.0f, -5.0f);
		glVertex3f(410.0f, 283.0f, -5.0f);
		glVertex3f(  0.0f, 283.0f, -5.0f);
	glEnd();

	//Luces

	//De la primera parte del escenario
	if(tiempo < 60)
	{
		for(int i=0; i<3; i++) //4 columnas de luces
			for(int j=0; j<2; j++) //2 luces por columna
			{
				glPushMatrix();
					glTranslatef(22.5f+(i*19.9f), 20.7f+(j*35.5f), -9.9f);

					glColor3f(0.74f, 0.0f, 0.74f);

					glBegin(GL_QUADS);
						glVertex3f(-1.3f, -0.4f, 0.0f);
						glVertex3f( 1.3f, -0.4f, 0.0f);
						glVertex3f( 1.3f,  0.4f, 0.0f);
						glVertex3f(-1.3f,  0.4f, 0.0f);
					glEnd();

					glColor3f(1.0f, 1.0f, 1.0f);

					glEnable(GL_TEXTURE_2D);

					glBindTexture(GL_TEXTURE_2D, textura[24].texID);

					glEnable(GL_BLEND);
					glBlendFunc(GL_ONE, GL_ONE);

					glPushMatrix();
						glScalef(escalaBrillo, escalaBrillo, escalaBrillo);

						glBegin(GL_QUADS);
							glTexCoord2f(0.0f, 0.0f); glVertex3f(-5.5f, -4.5f, 0.1f);
							glTexCoord2f(1.0f, 0.0f); glVertex3f( 5.5f, -4.5f, 0.1f);
							glTexCoord2f(1.0f, 1.0f); glVertex3f( 5.5f,  4.5f, 0.1f);
							glTexCoord2f(0.0f, 1.0f); glVertex3f(-5.5f,  4.5f, 0.1f);
						glEnd();
					glPopMatrix();

					glDisable(GL_BLEND);

					glDisable(GL_TEXTURE_2D);

				glPopMatrix();
			}

	}

	//De la segunda parte del escenario
	if(tiempo < 60)
	{
		for(int k=0; k<10; k++)
			for(int i=0; i<3; i++) //3 columnas de luces
				for(int j=0; j<2; j++) //2 luces por columna
				{
					glPushMatrix();
						glTranslatef(18.0f+(i*10.2f)+k*41.0f, 253.5f+(j*13.0f), -9.9f);

						glColor3f(0.74f, 0.0f, 0.74f);

						glBegin(GL_QUADS);
							glVertex3f(-1.3f, -0.4f, 0.0f);
							glVertex3f( 1.3f, -0.4f, 0.0f);
							glVertex3f( 1.3f,  0.4f, 0.0f);
							glVertex3f(-1.3f,  0.4f, 0.0f);
						glEnd();

						glColor3f(1.0f, 1.0f, 1.0f);

						glEnable(GL_TEXTURE_2D);

						glBindTexture(GL_TEXTURE_2D, textura[24].texID);

						glEnable(GL_BLEND);
						glBlendFunc(GL_ONE, GL_ONE);

						glPushMatrix();
							glScalef(escalaBrillo, escalaBrillo, escalaBrillo);

							glBegin(GL_QUADS);
								glTexCoord2f(0.0f, 0.0f); glVertex3f(-5.5f, -4.5f, 0.1f);
								glTexCoord2f(1.0f, 0.0f); glVertex3f( 5.5f, -4.5f, 0.1f);
								glTexCoord2f(1.0f, 1.0f); glVertex3f( 5.5f,  4.5f, 0.1f);
								glTexCoord2f(0.0f, 1.0f); glVertex3f(-5.5f,  4.5f, 0.1f);
							glEnd();
						glPopMatrix();

						glDisable(GL_BLEND);

						glDisable(GL_TEXTURE_2D);

					glPopMatrix();
				}

	}

	glColor3f(1.0f, 1.0f, 1.0f);

	glEnable(GL_LIGHTING);

	if(tiempo < 100) //Si el tiempo es menor que 60 se dibuja la luz, entre 60 y 100 se apaga
		tiempo++;
	else
		tiempo=0;

	if(tiempo > 40 && tiempo <= 50)
		funcionBrillo=1; //En este intervalo el brillo aumenta
	else if(tiempo > 50 && tiempo <= 60)
		funcionBrillo=2; //En este intervalo el brillo disminuye
	else
		funcionBrillo=0;

	if(funcionBrillo == 0)
		escalaBrillo=1.0f;
	else if(funcionBrillo == 1)
	{
		if(escalaBrillo < 2.5f)
			escalaBrillo+=0.1f;
	}
	else if(funcionBrillo == 2)
	{
		if(escalaBrillo > 1.2f)
			escalaBrillo-=0.1f;
	}
}
____________________________________________________________________________________________

10. Copiar la siguiente línea al principio de la función dibujaEscenario:

dibujaFondo();

____________________________________________________________________________________________

11. Copiar lo siguiente al final de la función dibujaEscenario, antes de //Siempre al final de la función...:

	//Conos de luz en el pasillo antes del jefe
	glPushMatrix();
		glTranslatef(255.0f, 225.9f, 0.0f);
		dibujaConodeLuz();
	glPopMatrix();

____________________________________________________________________________________________

12. Copiar la siguiente estructura en el archivo Main.h, antes de #endif

struct FRAME
{
	float Angt1;
	float Angt2;
	float Angc1;
	float Angc2;
	float Angbi1;
	float Angbi2;
	float Angbib;
	float Angbd1;
	float Angbd2;
	float Angbdb;
	float Angpizq1;
	float Angpizq2;
	float Angpder1;
	float Angpder2;
	float Angpi;
	float Angpd;

	float Xtor;
	float Ytor;
	float Ztor;

	float incAngt1;
	float incAngt2;
	float incAngc1;
	float incAngc2;
	float incAngbi1;
	float incAngbi2;
	float incAngbib;
	float incAngbd1;
	float incAngbd2;
	float incAngbdb;
	float incAngpizq1;
	float incAngpizq2;
	float incAngpder1;
	float incAngpder2;
	float incAngpi;
	float incAngpd;

	float incXtor;
	float incYtor;
	float incZtor;

};
____________________________________________________________________________________________

13. Copiar las siguientes variables en Main.cpp, antes de LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

//Variables para animaciones
const int maxKF1=3; //Num. total de KeyFrames para la secuencia 1 (caminar)
const int maxKF2=2; //Num. total de KeyFrames para la secuencia 2 (saltar)
const int maxKF3=2; //Num. total de KeyFrames para la secuencia 3 (disparar)

FRAME KeyFrame1[maxKF1]; //Contenedor para almacenar cada keyframe de la secuencia 1
FRAME KeyFrame2[maxKF2]; //Contenedor para almacenar cada keyframe de la secuencia 2
FRAME KeyFrame3[maxKF3]; //Contenedor para almacenar cada keyframe de la secuencia 3

//Variables auxiliares para animacion
bool play=false; //Bandera para iniciar la animación
int playIndex=0; //Auxiliar para leer la información del contenedor de keyframes
int tipoAnim=1; //Indicador del tipo de animación: 1-caminando, 2-saltando, 3-disparando
____________________________________________________________________________________________

14. Copiar las siguientes funciones antes de iniGL:

void InicializaAnim()
{
	//Se inicializan las variables de la secuencia 1
	for(int i=0; i<maxKF1; i++)
	{
		KeyFrame1[i].Angt1=0.0f;
		KeyFrame1[i].Angt2=0.0f;
		KeyFrame1[i].Angc1=0.0f;
		KeyFrame1[i].Angc2=0.0f;
		KeyFrame1[i].Angbi1=0.0f;
		KeyFrame1[i].Angbi2=0.0f;
		KeyFrame1[i].Angbib=0.0f;
		KeyFrame1[i].Angbd1=0.0f;
		KeyFrame1[i].Angbd2=0.0f;
		KeyFrame1[i].Angbdb=0.0f;
		KeyFrame1[i].Angpizq1=0.0f;
		KeyFrame1[i].Angpizq2=0.0f;
		KeyFrame1[i].Angpder1=0.0f;
		KeyFrame1[i].Angpder2=0.0f;
		KeyFrame1[i].Angpi=0.0f;
		KeyFrame1[i].Angpd=0.0f;
		KeyFrame1[i].Xtor=0.0f;
		KeyFrame1[i].Ytor=0.0f;
		KeyFrame1[i].Ztor=0.0f;

		KeyFrame1[i].incAngt1=0.0f;
		KeyFrame1[i].incAngt1=0.0f;
		KeyFrame1[i].incAngc1=0.0f;
		KeyFrame1[i].incAngc2=0.0f;
		KeyFrame1[i].incAngbi1=0.0f;
		KeyFrame1[i].incAngbi2=0.0f;
		KeyFrame1[i].incAngbib=0.0f;
		KeyFrame1[i].incAngbd1=0.0f;
		KeyFrame1[i].incAngbd2=0.0f;
		KeyFrame1[i].incAngbdb=0.0f;
		KeyFrame1[i].incAngpizq1=0.0f;
		KeyFrame1[i].incAngpizq2=0.0f;
		KeyFrame1[i].incAngpder1=0.0f;
		KeyFrame1[i].incAngpder2=0.0f;
		KeyFrame1[i].incAngpi=0.0f;
		KeyFrame1[i].incAngpd=0.0f;
		KeyFrame1[i].incXtor=0.0f;
		KeyFrame1[i].incYtor=0.0f;
		KeyFrame1[i].incZtor=0.0f;
	}

	//Se inicializan las variables de la secuencia 2
	for(int i=0; i<maxKF2; i++)
	{
		KeyFrame2[i].Angt1=0.0f;
		KeyFrame2[i].Angt2=0.0f;
		KeyFrame2[i].Angc1=0.0f;
		KeyFrame2[i].Angc2=0.0f;
		KeyFrame2[i].Angbi1=0.0f;
		KeyFrame2[i].Angbi2=0.0f;
		KeyFrame2[i].Angbib=0.0f;
		KeyFrame2[i].Angbd1=0.0f;
		KeyFrame2[i].Angbd2=0.0f;
		KeyFrame2[i].Angbdb=0.0f;
		KeyFrame2[i].Angpizq1=0.0f;
		KeyFrame2[i].Angpizq2=0.0f;
		KeyFrame2[i].Angpder1=0.0f;
		KeyFrame2[i].Angpder2=0.0f;
		KeyFrame2[i].Angpi=0.0f;
		KeyFrame2[i].Angpd=0.0f;
		KeyFrame2[i].Xtor=0.0f;
		KeyFrame2[i].Ytor=0.0f;
		KeyFrame2[i].Ztor=0.0f;

		KeyFrame2[i].incAngt1=0.0f;
		KeyFrame2[i].incAngt1=0.0f;
		KeyFrame2[i].incAngc1=0.0f;
		KeyFrame2[i].incAngc2=0.0f;
		KeyFrame2[i].incAngbi1=0.0f;
		KeyFrame2[i].incAngbi2=0.0f;
		KeyFrame2[i].incAngbib=0.0f;
		KeyFrame2[i].incAngbd1=0.0f;
		KeyFrame2[i].incAngbd2=0.0f;
		KeyFrame2[i].incAngbdb=0.0f;
		KeyFrame2[i].incAngpizq1=0.0f;
		KeyFrame2[i].incAngpizq2=0.0f;
		KeyFrame2[i].incAngpder1=0.0f;
		KeyFrame2[i].incAngpder2=0.0f;
		KeyFrame2[i].incAngpi=0.0f;
		KeyFrame2[i].incAngpd=0.0f;
		KeyFrame2[i].incXtor=0.0f;
		KeyFrame2[i].incYtor=0.0f;
		KeyFrame2[i].incZtor=0.0f;
	}

	//Se inicializan las variables de la secuencia 3
	for(int i=0; i<maxKF3; i++)
	{
		KeyFrame3[i].Angt1=0.0f;
		KeyFrame3[i].Angt2=0.0f;
		KeyFrame3[i].Angc1=0.0f;
		KeyFrame3[i].Angc2=0.0f;
		KeyFrame3[i].Angbi1=0.0f;
		KeyFrame3[i].Angbi2=0.0f;
		KeyFrame3[i].Angbib=0.0f;
		KeyFrame3[i].Angbd1=0.0f;
		KeyFrame3[i].Angbd2=0.0f;
		KeyFrame3[i].Angbdb=0.0f;
		KeyFrame3[i].Angpizq1=0.0f;
		KeyFrame3[i].Angpizq2=0.0f;
		KeyFrame3[i].Angpder1=0.0f;
		KeyFrame3[i].Angpder2=0.0f;
		KeyFrame3[i].Angpi=0.0f;
		KeyFrame3[i].Angpd=0.0f;
		KeyFrame3[i].Xtor=0.0f;
		KeyFrame3[i].Ytor=0.0f;
		KeyFrame3[i].Ztor=0.0f;

		KeyFrame3[i].incAngt1=0.0f;
		KeyFrame3[i].incAngt1=0.0f;
		KeyFrame3[i].incAngc1=0.0f;
		KeyFrame3[i].incAngc2=0.0f;
		KeyFrame3[i].incAngbi1=0.0f;
		KeyFrame3[i].incAngbi2=0.0f;
		KeyFrame3[i].incAngbib=0.0f;
		KeyFrame3[i].incAngbd1=0.0f;
		KeyFrame3[i].incAngbd2=0.0f;
		KeyFrame3[i].incAngbdb=0.0f;
		KeyFrame3[i].incAngpizq1=0.0f;
		KeyFrame3[i].incAngpizq2=0.0f;
		KeyFrame3[i].incAngpder1=0.0f;
		KeyFrame3[i].incAngpder2=0.0f;
		KeyFrame3[i].incAngpi=0.0f;
		KeyFrame3[i].incAngpd=0.0f;
		KeyFrame3[i].incXtor=0.0f;
		KeyFrame3[i].incYtor=0.0f;
		KeyFrame3[i].incZtor=0.0f;
	}
}

void DatosAnimacion()
{
	//Secuencia 1
	KeyFrame1[0].Angt1=25.0f;
	KeyFrame1[0].Angt2=0.0f;
	KeyFrame1[0].Angc1=-25.0f;
	KeyFrame1[0].Angc2=0.0f;
	KeyFrame1[0].Angbi1=-100.0f;
	KeyFrame1[0].Angbi2=0.0f;
	KeyFrame1[0].Angbib=-30.0f;
	KeyFrame1[0].Angbd1=120.0f;
	KeyFrame1[0].Angbd2=0.0f;
	KeyFrame1[0].Angbdb=-80.0f;
	KeyFrame1[0].Angpizq1=40.0f;
	KeyFrame1[0].Angpizq2=0.0f;
	KeyFrame1[0].Angpder1=-60.0f;
	KeyFrame1[0].Angpder2=0.0f;
	KeyFrame1[0].Angpi=30.0f;
	KeyFrame1[0].Angpd=40.0f;
	KeyFrame1[0].Xtor=0.0f;
	KeyFrame1[0].Ytor=0.0f;
	KeyFrame1[0].Ztor=0.0f;

	KeyFrame1[1].Angt1=25.0f;
	KeyFrame1[1].Angt2=0.0f;
	KeyFrame1[1].Angc1=-25.0f;
	KeyFrame1[1].Angc2=0.0f;
	KeyFrame1[1].Angbi1=120.0f;
	KeyFrame1[1].Angbi2=0.0f;
	KeyFrame1[1].Angbib=-80.0f;
	KeyFrame1[1].Angbd1=-100.0f;
	KeyFrame1[1].Angbd2=0.0f;
	KeyFrame1[1].Angbdb=-30.0f;
	KeyFrame1[1].Angpizq1=-60.0f;
	KeyFrame1[1].Angpizq2=0.0f;
	KeyFrame1[1].Angpder1=40.0f;
	KeyFrame1[1].Angpder2=0.0f;
	KeyFrame1[1].Angpi=40.0f;
	KeyFrame1[1].Angpd=30.0f;
	KeyFrame1[1].Xtor=0.0f;
	KeyFrame1[1].Ytor=0.0f;
	KeyFrame1[1].Ztor=0.0f;

	KeyFrame1[2].Angt1=25.0f;
	KeyFrame1[2].Angt2=0.0f;
	KeyFrame1[2].Angc1=-25.0f;
	KeyFrame1[2].Angc2=0.0f;
	KeyFrame1[2].Angbi1=-100.0f;
	KeyFrame1[2].Angbi2=0.0f;
	KeyFrame1[2].Angbib=-30.0f;
	KeyFrame1[2].Angbd1=120.0f;
	KeyFrame1[2].Angbd2=0.0f;
	KeyFrame1[2].Angbdb=-80.0f;
	KeyFrame1[2].Angpizq1=40.0f;
	KeyFrame1[2].Angpizq2=0.0f;
	KeyFrame1[2].Angpder1=-40.0f;
	KeyFrame1[2].Angpder2=0.0f;
	KeyFrame1[2].Angpi=30.0f;
	KeyFrame1[2].Angpd=20.0f;
	KeyFrame1[2].Xtor=0.0f;
	KeyFrame1[2].Ytor=0.0f;
	KeyFrame1[2].Ztor=0.0f;
	
	//Secuencia 2
	KeyFrame2[0].Angt1=0.0f;
	KeyFrame2[0].Angt2=0.0f;
	KeyFrame2[0].Angc1=0.0f;
	KeyFrame2[0].Angc2=0.0f;
	KeyFrame2[0].Angbi1=0.0f;
	KeyFrame2[0].Angbi2=0.0f;
	KeyFrame2[0].Angbd1=0.0f;
	KeyFrame2[0].Angbd2=0.0f;
	KeyFrame2[0].Angpizq1=0.0f;
	KeyFrame2[0].Angpizq2=0.0f;
	KeyFrame2[0].Angpder1=0.0f;
	KeyFrame2[0].Angpder2=0.0f;
	KeyFrame2[0].Angpi=0.0f;
	KeyFrame2[0].Angpd=0.0f;
	KeyFrame2[0].Xtor=0.0f;
	KeyFrame2[0].Ytor=0.0f;
	KeyFrame2[0].Ztor=0.0f;

	KeyFrame2[1].Angt1=0.0f;
	KeyFrame2[1].Angt2=0.0f;
	KeyFrame2[1].Angc1=0.0f;
	KeyFrame2[1].Angc2=0.0f;
	KeyFrame2[1].Angbi1=0.0f;
	KeyFrame2[1].Angbi2=0.0f;
	KeyFrame2[1].Angbd1=0.0f;
	KeyFrame2[1].Angbd2=0.0f;
	KeyFrame2[1].Angpizq1=0.0f;
	KeyFrame2[1].Angpizq2=0.0f;
	KeyFrame2[1].Angpder1=0.0f;
	KeyFrame2[1].Angpder2=0.0f;
	KeyFrame2[1].Angpi=0.0f;
	KeyFrame2[1].Angpd=0.0f;
	KeyFrame2[1].Xtor=0.0f;
	KeyFrame2[1].Ytor=0.0f;
	KeyFrame2[1].Ztor=0.0f;

	//Secuencia 3
	KeyFrame3[0].Angt1=0.0f;
	KeyFrame3[0].Angt2=0.0f;
	KeyFrame3[0].Angc1=0.0f;
	KeyFrame3[0].Angc2=0.0f;
	KeyFrame3[0].Angbi1=0.0f;
	KeyFrame3[0].Angbi2=0.0f;
	KeyFrame3[0].Angbd1=0.0f;
	KeyFrame3[0].Angbd2=0.0f;
	KeyFrame3[0].Angpizq1=0.0f;
	KeyFrame3[0].Angpizq2=0.0f;
	KeyFrame3[0].Angpder1=0.0f;
	KeyFrame3[0].Angpder2=0.0f;
	KeyFrame3[0].Angpi=0.0f;
	KeyFrame3[0].Angpd=0.0f;
	KeyFrame3[0].Xtor=0.0f;
	KeyFrame3[0].Ytor=0.0f;
	KeyFrame3[0].Ztor=0.0f;

	KeyFrame3[1].Angt1=0.0f;
	KeyFrame3[1].Angt2=0.0f;
	KeyFrame3[1].Angc1=0.0f;
	KeyFrame3[1].Angc2=0.0f;
	KeyFrame3[1].Angbi1=0.0f;
	KeyFrame3[1].Angbi2=0.0f;
	KeyFrame3[1].Angbd1=0.0f;
	KeyFrame3[1].Angbd2=0.0f;
	KeyFrame3[1].Angpizq1=0.0f;
	KeyFrame3[1].Angpizq2=0.0f;
	KeyFrame3[1].Angpder1=0.0f;
	KeyFrame3[1].Angpder2=0.0f;
	KeyFrame3[1].Angpi=0.0f;
	KeyFrame3[1].Angpd=0.0f;
	KeyFrame3[1].Xtor=0.0f;
	KeyFrame3[1].Ytor=0.0f;
	KeyFrame3[1].Ztor=0.0f;
}
____________________________________________________________________________________________

15. Copiar la siguiente función después de IniGL:

void animacion(FRAME *KeyFrame, int maxKF , int frames)
{
	if(play)
	{		
		if((abs(KeyFrame[playIndex+1].Angt1-Angt1))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angt2-Angt2))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angc1-Angc1))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angc2-Angc2))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angbi1-Angbi1))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angbi2-Angbi2))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angbib-Angbib))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angbd1-Angbd1))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angbd2-Angbd2))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angbdb-Angbdb))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angpizq1-Angpizq1))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angpizq2-Angpizq2))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angpder1-Angpder1))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angpder2-Angpder2))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angpi-Angpi))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Angpd-Angpd))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Xtor-Xtor))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Ytor-Ytor))<0.1 &&
		   (abs(KeyFrame[playIndex+1].Ztor-Ztor))<0.1)
		{			
			playIndex++;			
			if(playIndex>maxKF-2)
			{
				playIndex=0;
				play=false;
								
			}
		}
		else
		{
			KeyFrame[playIndex].incAngt1   = (KeyFrame[playIndex+1].Angt1-KeyFrame[playIndex].Angt1)/frames;
			KeyFrame[playIndex].incAngt2   = (KeyFrame[playIndex+1].Angt2-KeyFrame[playIndex].Angt2)/frames;
			KeyFrame[playIndex].incAngc1   = (KeyFrame[playIndex+1].Angc1-KeyFrame[playIndex].Angc1)/frames;
			KeyFrame[playIndex].incAngc2   = (KeyFrame[playIndex+1].Angc2-KeyFrame[playIndex].Angc2)/frames;
			KeyFrame[playIndex].incAngbi1  = (KeyFrame[playIndex+1].Angbi1-KeyFrame[playIndex].Angbi1)/frames;
			KeyFrame[playIndex].incAngbi2  = (KeyFrame[playIndex+1].Angbi2-KeyFrame[playIndex].Angbi2)/frames;
			KeyFrame[playIndex].incAngbib  = (KeyFrame[playIndex+1].Angbib-KeyFrame[playIndex].Angbib)/frames;
			KeyFrame[playIndex].incAngbd1  = (KeyFrame[playIndex+1].Angbd1-KeyFrame[playIndex].Angbd1)/frames;
			KeyFrame[playIndex].incAngbd2  = (KeyFrame[playIndex+1].Angbd2-KeyFrame[playIndex].Angbd2)/frames;
			KeyFrame[playIndex].incAngbdb  = (KeyFrame[playIndex+1].Angbdb-KeyFrame[playIndex].Angbdb)/frames;
			KeyFrame[playIndex].incAngpizq1= (KeyFrame[playIndex+1].Angpizq1-KeyFrame[playIndex].Angpizq1)/frames;
			KeyFrame[playIndex].incAngpizq2= (KeyFrame[playIndex+1].Angpizq2-KeyFrame[playIndex].Angpizq2)/frames;
			KeyFrame[playIndex].incAngpder1= (KeyFrame[playIndex+1].Angpder1-KeyFrame[playIndex].Angpder1)/frames;
			KeyFrame[playIndex].incAngpder2= (KeyFrame[playIndex+1].Angpder2-KeyFrame[playIndex].Angpder2)/frames;
			KeyFrame[playIndex].incAngpi   = (KeyFrame[playIndex+1].Angpi-KeyFrame[playIndex].Angpi)/frames;
			KeyFrame[playIndex].incAngpd   = (KeyFrame[playIndex+1].Angpd-KeyFrame[playIndex].Angpd)/frames;
			KeyFrame[playIndex].incXtor    = (KeyFrame[playIndex+1].Xtor-KeyFrame[playIndex].Xtor)/frames;
			KeyFrame[playIndex].incYtor    = (KeyFrame[playIndex+1].Ytor-KeyFrame[playIndex].Ytor)/frames;
			KeyFrame[playIndex].incZtor    = (KeyFrame[playIndex+1].Ztor-KeyFrame[playIndex].Ztor)/frames;
			
			Angt1   += KeyFrame[playIndex].incAngt1;
			Angt2   += KeyFrame[playIndex].incAngt2;
			Angc1   += KeyFrame[playIndex].incAngc1;
			Angc2   += KeyFrame[playIndex].incAngc2;
			Angbi1  += KeyFrame[playIndex].incAngbi1;
			Angbi2  += KeyFrame[playIndex].incAngbi2;
			Angbib  += KeyFrame[playIndex].incAngbib;
			Angbd1  += KeyFrame[playIndex].incAngbd1;
			Angbd2  += KeyFrame[playIndex].incAngbd2;
			Angbdb  += KeyFrame[playIndex].incAngbdb;
			Angpizq1+= KeyFrame[playIndex].incAngpizq1;
			Angpizq2+= KeyFrame[playIndex].incAngpizq2;
			Angpder1+= KeyFrame[playIndex].incAngpder1;
			Angpder2+= KeyFrame[playIndex].incAngpder2;
			Angpi   += KeyFrame[playIndex].incAngpi;
			Angpd   += KeyFrame[playIndex].incAngpd;
			Xtor    += KeyFrame[playIndex].incXtor;
			Ytor    += KeyFrame[playIndex].incYtor;
			Ztor    += KeyFrame[playIndex].incZtor;
			
		}
	}
}

void ControlPersonaje(int funcion)
{
	if(funcion == 1) //Avanza a la derecha
	{
		player1.AngObj=90.0f;
		player1.PosicionObj.x+=1.0f;
	}
	else if(funcion == 2) //avanza a la izquierda
	{
		player1.AngObj=270.0f;
		player1.PosicionObj.x-=1.0f;
	}
}

____________________________________________________________________________________________

16. Copiar lo siguiente en IniGL

	InicializaAnim();
	DatosAnimacion();

____________________________________________________________________________________________

17. Copiar lo siguiente en la función WinMain, después de la llamada a RenderizaEscena:

	if(play)
	{
			
		if(tipoAnim == 1) //caminar
			animacion(KeyFrame1, maxKF1 , 12);
		else if(tipoAnim == 2) //saltar
			animacion(KeyFrame2, maxKF2 , 10);
		else if(tipoAnim == 3) //disparar
			animacion(KeyFrame3, maxKF3 , 10);
						
	}

____________________________________________________________________________________________

18. En la función ManejaTeclado reemplazar esto:

	//Si no se presiona A ni S
	if(!keys['A'] && !keys['S'])
	{
		Angt1=0.0f;   //Torso: rotación en X
		Angt2=0.0f;   //Torso: rotación en Y
		Angc1=0.0f;   //Cabeza: rotación en X
		Angc2=0.0f;   //Cabeza: rotación en Y
		Angbi1=0.0f;  //Brazo Izq: rotación en X
		Angbi2=0.0f;  //Brazo Izq: rotación en Z
		Angbib=0.0f;  //Antebrazo Izq: rotación en X
		Angbd1=0.0f;  //Brazo Der: rotación en X
		Angbd2=0.0f;  //Brazo Der: rotación en Z
		Angbdb=0.0f;  //Antebrazo Der: rotación en X
		Angpizq1=0.0f; //Pierna Izq: rotación en X
		Angpizq2=0.0f; //Pierna Izq: rotación en Z
		Angpder1=0.0f; //Pierna Der: rotación en X
		Angpder2=0.0f; //Pierna Der: rotación en Z
		Angpi=0.0f;   //Pie Izq: rotación en X
		Angpd=0.0f;   //Pie Der: rotación en X

		Xtor=0.0f;    //Torso: posición en X
		Ytor=0.0f;    //Torso: posición en Y
		Ztor=0.0f;    //Torso: posición en Z
	}

por esto:

	//Al presionar cualquiera de las teclas de dirección se iniciará la animación de caminar
	//Al soltar la tecla presionada se detiene la animación.
	if(GetKeyState(VK_LEFT) & 0x80) //Si está presionada la tecla LEFT
	{
		ControlPersonaje(2);
		
		if(play==false) //Para que la asignación de valores siguiente solo se haga una vez y empiece la animación
		{
			//Se le asignan a las variables del personaje los 
			//valores almacenados en el primer keyframe para que
			//inicie desde ahí la animación.
			Angt1   = KeyFrame1[0].Angt1;
			Angt2   = KeyFrame1[0].Angt2;
			Angc1   = KeyFrame1[0].Angc1;
			Angc2   = KeyFrame1[0].Angc2;
			Angbi1  = KeyFrame1[0].Angbi1;
			Angbi2  = KeyFrame1[0].Angbi2;
			Angbib  = KeyFrame1[0].Angbib;
			Angbd1  = KeyFrame1[0].Angbd1;
			Angbd2  = KeyFrame1[0].Angbd2;
			Angbdb  = KeyFrame1[0].Angbdb;
			Angpizq1= KeyFrame1[0].Angpizq1;
			Angpizq2= KeyFrame1[0].Angpizq2;
			Angpder1= KeyFrame1[0].Angpder1;
			Angpder2= KeyFrame1[0].Angpder2;
			Angpi   = KeyFrame1[0].Angpi;
			Angpd   = KeyFrame1[0].Angpd;
			Xtor    = KeyFrame1[0].Xtor;
			Ytor    = KeyFrame1[0].Ytor;
			Ztor    = KeyFrame1[0].Ztor;

			play=true;
			playIndex=0;
			tipoAnim=1;

			player1.caminando=true;
					
		}
	}

	if(GetKeyState(VK_RIGHT) & 0x80) //Si está presionada la tecla RIGHT
	{
		ControlPersonaje(1);
		
		if(play==false) //Para que la asignación de valores siguiente solo se haga una vez y empiece la animación
		{
			//Se le asignan a las variables del personaje los 
			//valores almacenados en el primer keyframe para que
			//inicie desde ahí la animación.
			Angt1   = KeyFrame1[0].Angt1;
			Angt2   = KeyFrame1[0].Angt2;
			Angc1   = KeyFrame1[0].Angc1;
			Angc2   = KeyFrame1[0].Angc2;
			Angbi1  = KeyFrame1[0].Angbi1;
			Angbi2  = KeyFrame1[0].Angbi2;
			Angbib  = KeyFrame1[0].Angbib;
			Angbd1  = KeyFrame1[0].Angbd1;
			Angbd2  = KeyFrame1[0].Angbd2;
			Angbdb  = KeyFrame1[0].Angbdb;
			Angpizq1= KeyFrame1[0].Angpizq1;
			Angpizq2= KeyFrame1[0].Angpizq2;
			Angpder1= KeyFrame1[0].Angpder1;
			Angpder2= KeyFrame1[0].Angpder2;
			Angpi   = KeyFrame1[0].Angpi;
			Angpd   = KeyFrame1[0].Angpd;
			Xtor    = KeyFrame1[0].Xtor;
			Ytor    = KeyFrame1[0].Ytor;
			Ztor    = KeyFrame1[0].Ztor;

			play=true;
			playIndex=0;
			tipoAnim=1;
					
			player1.caminando=true;
		}

	}
	
	//Para que al soltar la tecla presionada el personaje no quede en una posición
	//intermedia de la animación se asignan los valores originales a las variables
	if(!(GetKeyState(VK_LEFT) & 0x80  || GetKeyState(VK_RIGHT) & 0x80)) //Si no está presionada alguna de esas teclas
	{

		if(tipoAnim == 1) //Para que no afecte la posición si está detenido pero saltando*
		{
			play=false;
			Angt1   = 0.0f;
			Angt2   = 0.0f;
			Angc1   = 0.0f;
			Angc2   = 0.0f;
			Angbi1  = 0.0f;
			Angbi2  = 0.0f;
			Angbib  = 0.0f;
			Angbd1  = 0.0f;
			Angbd2  = 0.0f;
			Angbdb  = 0.0f;
			Angpizq1= 0.0f;
			Angpizq2= 0.0f;
			Angpder1= 0.0f;
			Angpder2= 0.0f;
			Angpi   = 0.0f;
			Angpd   = 0.0f;
			Xtor    = 0.0f;
			Ytor    = 0.0f;
			Ztor    = 0.0f;

			player1.caminando=false;
		}

	}

____________________________________________________________________________________________

19. En la función dibujaEscenario reemplazar el código de los bloques 1 al 10 por este:

	//Bloque 1

	glBindTexture(GL_TEXTURE_2D, textura[0].texID);

	//Cara frontal
	glColor3f(0.6f, 0.6f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 0.0f,  0.0f, 5.0f);
		glTexCoord2f(2.0f, 0.0f); glVertex3f(60.0f,  0.0f, 5.0f);
		glTexCoord2f(2.0f, 1.0f); glVertex3f(60.0f, 12.5f, 5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 0.0f, 12.5f, 5.0f);
	glEnd();

	glBindTexture(GL_TEXTURE_2D, textura[16].texID);

	//Cara superior
	glColor3f(0.6f, 0.6f, 1.0f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 1.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 0.0f, 12.5f,  5.0f);
		glTexCoord2f(6.0f, 0.0f); glVertex3f(60.0f, 12.5f,  5.0f);
		glTexCoord2f(6.0f, 1.0f); glVertex3f(60.0f, 12.5f, -5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 0.0f, 12.5f, -5.0f);
	glEnd();

	//Bloque 2

	glBindTexture(GL_TEXTURE_2D, textura[17].texID);

	//Cara frontal
	glColor3f(0.7f, 0.7f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f,-0.5f); glVertex3f(60.0f,  0.0f, 5.0f);
		glTexCoord2f(1.0f,-0.5f); glVertex3f(65.0f,  0.0f, 5.0f);
		glTexCoord2f(1.0f, 2.0f); glVertex3f(65.0f, 12.5f, 5.0f);
		glTexCoord2f(0.0f, 2.0f); glVertex3f(60.0f, 12.5f, 5.0f);
	glEnd();

	//Cara superior
	glColor3f(0.7f, 0.7f, 1.0f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 1.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(60.0f, 12.5f,  5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(65.0f, 12.5f,  5.0f);
		glTexCoord2f(1.0f, 2.0f); glVertex3f(65.0f, 12.5f, -5.0f);
		glTexCoord2f(0.0f, 2.0f); glVertex3f(60.0f, 12.5f, -5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.5f, 0.5f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f,-0.5f); glVertex3f(65.0f,  0.0f,  5.0f);
		glTexCoord2f(2.0f,-0.5f); glVertex3f(65.0f,  0.0f, -5.0f);
		glTexCoord2f(2.0f, 2.0f); glVertex3f(65.0f, 12.5f, -5.0f);
		glTexCoord2f(0.0f, 2.0f); glVertex3f(65.0f, 12.5f,  5.0f);
	glEnd();

	//Bloque 3

	glBindTexture(GL_TEXTURE_2D, textura[8].texID);

	//Cara frontal
	glColor3f(0.7f, 0.7f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(70.0f,  1.0f, 5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(80.0f,  1.0f, 5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(80.0f, 10.0f, 5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(70.0f, 10.0f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.5f, 0.5f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(80.0f,  1.0f,  5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(80.0f,  1.0f, -5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(80.0f, 10.0f, -5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(80.0f, 10.0f,  5.0f);
	glEnd();

	//Cara izquierda
	glColor3f(0.5f, 0.5f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(-1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(70.0f,  1.0f, -5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(70.0f,  1.0f,  5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(70.0f, 10.0f,  5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(70.0f, 10.0f, -5.0f);
	glEnd();
	
	//Bloque 4

	glBindTexture(GL_TEXTURE_2D, textura[1].texID);

	//Cara frontal
	glColor3f(0.6f, 0.6f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.5f, 0.9f); glVertex3f(70.0f, -2.0f, 5.0f);
		glTexCoord2f(1.0f, 0.9f); glVertex3f(80.0f, -2.0f, 5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(80.0f,  1.0f, 5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(70.0f,  1.0f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.4f, 0.4f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.5f, 0.9f); glVertex3f(80.0f, -2.0f,  5.0f);
		glTexCoord2f(1.0f, 0.9f); glVertex3f(80.0f, -2.0f, -5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(80.0f,  1.0f, -5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(80.0f,  1.0f,  5.0f);
	glEnd();

	//Cara izquierda
	glColor3f(0.4f, 0.4f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(-1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.5f, 0.9f); glVertex3f(70.0f, -2.0f, -5.0f);
		glTexCoord2f(1.0f, 0.9f); glVertex3f(70.0f, -2.0f,  5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(70.0f,  1.0f,  5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(70.0f,  1.0f, -5.0f);
	glEnd();

	//Bloque 5

	//Cara frontal
	glColor3f(0.6f, 0.6f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.1f, 0.0f); glVertex3f(0.0f, 12.5f, 5.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(7.5f, 12.5f, 5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(7.5f, 42.5f, 5.0f);
		glTexCoord2f(0.1f, 1.0f); glVertex3f(0.0f, 42.5f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.4f, 0.4f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(7.5f, 12.5f,  5.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(7.5f, 12.5f, -5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(7.5f, 42.5f, -5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(7.5f, 42.5f,  5.0f);
	glEnd();

	//Bloque 6

	//Cara frontal
	glColor3f(0.7f, 0.7f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.5f, 0.0f);  glVertex3f(0.0f, 42.5f, 5.0f);
		glTexCoord2f(1.0f, 0.0f);  glVertex3f(7.5f, 42.5f, 5.0f);
		glTexCoord2f(1.0f, 0.92f); glVertex3f(7.5f, 72.5f, 5.0f);
		glTexCoord2f(0.5f, 0.92f); glVertex3f(0.0f, 72.5f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.5f, 0.5f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.5f, 0.0f);  glVertex3f(7.5f, 42.5f,  5.0f);
		glTexCoord2f(1.0f, 0.0f);  glVertex3f(7.5f, 42.5f, -5.0f);
		glTexCoord2f(1.0f, 0.92f); glVertex3f(7.5f, 72.5f, -5.0f);
		glTexCoord2f(0.5f, 0.92f); glVertex3f(7.5f, 72.5f,  5.0f);
	glEnd();

	//Bloque 7

	//Cara frontal
	glColor3f(0.6f, 0.6f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(70.0f, 10.0f, 5.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(80.0f, 10.0f, 5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(80.0f, 40.0f, 5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(70.0f, 40.0f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.4f, 0.4f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(80.0f, 10.0f,  5.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(80.0f, 10.0f, -5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(80.0f, 40.0f, -5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(80.0f, 40.0f,  5.0f);
	glEnd();

	//Cara izquierda
	glColor3f(0.4f, 0.4f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(-1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(70.0f, 10.0f, -5.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(70.0f, 10.0f,  5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(70.0f, 40.0f,  5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(70.0f, 40.0f, -5.0f);
	glEnd();

	//Bloque 8

	//Cara frontal
	glColor3f(0.7f, 0.7f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(70.0f, 40.0f, 5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(80.0f, 40.0f, 5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(80.0f, 75.0f, 5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(70.0f, 75.0f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.5f, 0.5f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(80.0f, 40.0f,  5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(80.0f, 40.0f, -5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(80.0f, 75.0f, -5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(80.0f, 75.0f,  5.0f);
	glEnd();

	//Cara izquierda
	glColor3f(0.5f, 0.5f, 0.8f);

	glBegin(GL_QUADS);
		glNormal3f(-1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.5f, 0.0f); glVertex3f(70.0f, 40.0f, -5.0f);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(70.0f, 40.0f,  5.0f);
		glTexCoord2f(1.0f, 1.0f); glVertex3f(70.0f, 75.0f,  5.0f);
		glTexCoord2f(0.5f, 1.0f); glVertex3f(70.0f, 75.0f, -5.0f);
	glEnd();

	//Bloque 9

	glBindTexture(GL_TEXTURE_2D, textura[18].texID);

	//Cara frontal
	glColor3f(0.6f, 0.6f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(0.0f, 0.5f); glVertex3f( 0.0f, 72.5f, 5.0f);
		glTexCoord2f(5.2f, 0.5f); glVertex3f(30.0f, 72.5f, 5.0f);
		glTexCoord2f(5.2f, 1.0f); glVertex3f(30.0f, 75.0f, 5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 0.0f, 75.0f, 5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.4f, 0.4f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.5f); glVertex3f(30.0f, 72.5f,  5.0f);
		glTexCoord2f(2.0f, 0.5f); glVertex3f(30.0f, 72.5f, -5.0f);
		glTexCoord2f(2.0f, 1.0f); glVertex3f(30.0f, 75.0f, -5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(30.0f, 75.0f,  5.0f);
	glEnd();

	//Bloque 10

	//Cara frontal
	glColor3f(0.6f, 0.7f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, 0.0f, 1.0f);
		glTexCoord2f(1.3f, 0.5f); glVertex3f( 7.5f, 70.5f, 5.0f);
		glTexCoord2f(5.2f, 0.5f); glVertex3f(30.0f, 70.5f, 5.0f);
		glTexCoord2f(5.2f, 1.0f); glVertex3f(30.0f, 72.5f, 5.0f);
		glTexCoord2f(1.3f, 1.0f); glVertex3f( 7.5f, 72.5f, 5.0f);
	glEnd();

	//Cara inferior
	glColor3f(0.4f, 0.5f, 0.5f);

	glBegin(GL_QUADS);
		glNormal3f(0.0f, -1.0f, 0.0f);
		glTexCoord2f(2.0f, 0.0f); glVertex3f(30.0f, 70.5f,  5.0f);
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 7.5f, 70.5f,  5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 7.5f, 70.5f, -5.0f);
		glTexCoord2f(2.0f, 1.0f); glVertex3f(30.0f, 70.5f, -5.0f);
	glEnd();

	//Cara derecha
	glColor3f(0.4f, 0.7f, 0.7f);

	glBegin(GL_QUADS);
		glNormal3f(1.0f, 0.0f, 0.0f);
		glTexCoord2f(0.0f, 0.5f); glVertex3f(30.0f, 70.5f,  5.0f);
		glTexCoord2f(2.0f, 0.5f); glVertex3f(30.0f, 70.5f, -5.0f);
		glTexCoord2f(2.0f, 1.0f); glVertex3f(30.0f, 72.5f, -5.0f);
		glTexCoord2f(0.0f, 1.0f); glVertex3f(30.0f, 72.5f,  5.0f);
	glEnd();
____________________________________________________________________________________________